{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nickwalters/DIGITICKETS/digitickets/src/App.js\";\nimport React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Form from \"react-bootstrap/Form\";\nimport './App.css';\n\nclass App extends Component {\n  //code\n  // http://michaelsoriano.com/react-bootstrap-form-validation/\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstname: \"\",\n      error: true,\n      errorTxt: \"Error Text\"\n    };\n    this.handleInputChange = this.handleInputChange.bind(this); // this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  hasError(date) {\n    return true; // return true/false if date valid?\n    // return this.state.errors.indexOf(key) !== -1;\n  }\n\n  isValidDate(dateString) {\n    // First check for the pattern\n    if (!/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(dateString)) return false; // Parse the date parts to integers\n\n    var parts = dateString.split(\"/\");\n    var day = parseInt(parts[1], 10);\n    var month = parseInt(parts[0], 10);\n    var year = parseInt(parts[2], 10); // Check the ranges of month and year\n\n    if (year < 1000 || year > 3000 || month === 0 || month > 12) return false;\n    var monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // Adjust for leap years\n\n    if (year % 400 === 0 || year % 100 !== 0 && year % 4 === 0) monthLength[1] = 29; // Check the range of the day\n\n    return day > 0 && day <= monthLength[month - 1];\n  }\n\n  handleInputChange(event) {\n    console.log(\"CHANGE\", event.target.value);\n    console.log(\"is valid: \", this.isValidDate(event.target.value)); //\n\n    this.isValidDate(event.target.value) ? this.setState({\n      error: false\n    }) : this.setState({\n      error: true\n    }); // if(event.target.value === \"a\"){\n    // this.setState({error: false});\n    // Validates that the input string is a valid date formatted as \"mm/dd/yyyy\"\n\n    /*\n    https://stackoverflow.com/questions/6177975/how-to-validate-date-with-format-mm-dd-yyyy-in-javascript\n    */\n    // }\n\n    var key = event.target.name;\n    var value = event.target.value;\n    var obj = {};\n    obj[key] = value;\n    this.setState(obj);\n  } //\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"p-3 text-left\",\n        children: /*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"font-weight-light text-primary\",\n              children: \"Digitickets Text Input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"font-weight-light text-primary\",\n              children: \"Please enter a valid historical date using the format DD/MM/YYYY\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"formBasicTextInput\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  placeholder: \"DD/MM/YYYY\",\n                  size: \"lg\",\n                  className: this.state.error ? \"form-control is-invalid\" : \"form-control is-valid\",\n                  name: \"firstname\",\n                  value: this.state.firstname,\n                  onChange: this.handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n                  className: \"text-muted\",\n                  children: \"Helper Text\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nickwalters/DIGITICKETS/digitickets/src/App.js"],"names":["React","Component","Container","Jumbotron","Form","App","constructor","props","state","firstname","error","errorTxt","handleInputChange","bind","hasError","date","isValidDate","dateString","test","parts","split","day","parseInt","month","year","monthLength","event","console","log","target","value","setState","key","name","obj","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Form from \"react-bootstrap/Form\";\n\nimport './App.css';\n\nclass App extends Component {\n  //code\n  // http://michaelsoriano.com/react-bootstrap-form-validation/\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      firstname: \"\",\n      error: true,\n      errorTxt: \"Error Text\",\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    // this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  hasError(date) {\n    return true;\n    // return true/false if date valid?\n    // return this.state.errors.indexOf(key) !== -1;\n  }\n  \n  isValidDate(dateString)\n    {\n        // First check for the pattern\n        if(!/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(dateString))\n            return false;\n\n        // Parse the date parts to integers\n        var parts = dateString.split(\"/\");\n        var day = parseInt(parts[1], 10);\n        var month = parseInt(parts[0], 10);\n        var year = parseInt(parts[2], 10);\n\n        // Check the ranges of month and year\n        if(year < 1000 || year > 3000 || month === 0 || month > 12)\n            return false;\n\n        var monthLength = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];\n\n        // Adjust for leap years\n        if(year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0))\n            monthLength[1] = 29;\n\n        // Check the range of the day\n        return day > 0 && day <= monthLength[month - 1];\n    };\n    \n \n\n  handleInputChange(event) {\n    console.log(\"CHANGE\", event.target.value);\n    console.log(\"is valid: \",this.isValidDate(event.target.value) );\n    //\n    this.isValidDate(event.target.value) ? this.setState({error: false}) : this.setState({error: true});\n    // if(event.target.value === \"a\"){\n      // this.setState({error: false});\n      // Validates that the input string is a valid date formatted as \"mm/dd/yyyy\"\n      /*\n      https://stackoverflow.com/questions/6177975/how-to-validate-date-with-format-mm-dd-yyyy-in-javascript\n      */\n      // }\n    var key = event.target.name;\n    var value = event.target.value;\n    var obj = {};\n    obj[key] = value;\n    this.setState(obj);\n  }\n\n  //\n  render() {\n    return (\n      <div className=\"App\">\n        <Container className=\"p-3 text-left\">\n          <Jumbotron >\n            <div>\n              <h1 className=\"font-weight-light text-primary\">\n                Digitickets Text Input\n              </h1>\n              <h2 className=\"font-weight-light text-primary\">\n                Please enter a valid historical date using the format DD/MM/YYYY\n              </h2>\n            </div>\n            <div>\n              <Form>\n                <Form.Group \n                  controlId=\"formBasicTextInput\"\n                  >\n                  <Form.Label\n                    >Date\n                  </Form.Label>\n                  <Form.Control \n                    type=\"text\" \n                    placeholder=\"DD/MM/YYYY\" \n                    size=\"lg\"\n                    className={\n                    this.state.error\n                      ? \"form-control is-invalid\"\n                      : \"form-control is-valid\"\n                    }\n                    name=\"firstname\"\n                    value={this.state.firstname}\n                    onChange={this.handleInputChange}\n                  />\n                  <Form.Text className=\"text-muted\">\n                    Helper Text\n                  </Form.Text>\n                </Form.Group>\n              </Form>\n            </div>\n          </Jumbotron>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}