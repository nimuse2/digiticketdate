{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nickwalters/DIGITICKETS/digitickets/src/App.js\";\nimport React, { Component } from \"react\";\nimport isValidDate from './js/functions.js';\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Form from \"react-bootstrap/Form\";\nimport './App.css';\n\nclass App extends Component {\n  //code\n  // http://michaelsoriano.com/react-bootstrap-form-validation/\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstname: \"\",\n      error: true,\n      errortxt: \"Error Text\"\n    };\n    this.handleInputChange = this.handleInputChange.bind(this); // this.isValidDate = this.isValidDate.bind(this);\n  } // isValidDate(dateString)\n  //   {\n  //       // First check for the pattern\n  //       if(!/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(dateString))\n  //           return false;\n  //       // Parse the date parts to integers\n  //       var parts = dateString.split(\"/\");\n  //       var day = parseInt(parts[1], 10);\n  //       var month = parseInt(parts[0], 10);\n  //       var year = parseInt(parts[2], 10);\n  //       // Check the ranges of month and year\n  //       if(year < 1000 || year > 3000 || month === 0 || month > 12)\n  //           return false;\n  //       var monthLength = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];\n  //       // Adjust for leap years\n  //       if(year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0))\n  //           monthLength[1] = 29;\n  //       // Check the range of the day\n  //       return day > 0 && day <= monthLength[month - 1];\n  //   };\n\n\n  handleInputChange(event) {\n    this.isValidDate(event.target.value) ? this.setState({\n      error: false\n    }) : this.setState({\n      error: true\n    });\n    this.setState({\n      errortxt: \"Changing...\"\n    });\n    isValidDate(event.target.value) ? this.setState({\n      errortxt: \"Yay!\"\n    }) : this.setState({\n      error: \"hmmm\"\n    });\n    var key = event.target.name;\n    var value = event.target.value;\n    var obj = {};\n    obj[key] = value;\n    this.setState(obj);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"p-3 text-left\",\n        children: /*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"font-weight-light text-primary\",\n              children: \"Digitickets Text Input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"font-weight-light text-primary\",\n              children: \"Please enter a valid historical date using the format DD/MM/YYYY\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"formBasicTextInput\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  placeholder: \"DD/MM/YYYY\",\n                  size: \"lg\",\n                  className: this.state.error ? \"form-control is-invalid\" : \"form-control is-valid\",\n                  name: \"firstname\",\n                  value: this.state.firstname,\n                  onChange: this.handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n                  className: this.state.error ? \"text-danger \" : \"text-success \",\n                  children: this.state.errortxt\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nickwalters/DIGITICKETS/digitickets/src/App.js"],"names":["React","Component","isValidDate","Container","Jumbotron","Form","App","constructor","props","state","firstname","error","errortxt","handleInputChange","bind","event","target","value","setState","key","name","obj","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport isValidDate from './js/functions.js';\n\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Form from \"react-bootstrap/Form\";\n\nimport './App.css';\n\nclass App extends Component {\n  //code\n  // http://michaelsoriano.com/react-bootstrap-form-validation/\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      firstname: \"\",\n      error: true,\n      errortxt: \"Error Text\",\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    // this.isValidDate = this.isValidDate.bind(this);\n  }\n  \n  // isValidDate(dateString)\n  //   {\n  //       // First check for the pattern\n  //       if(!/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(dateString))\n  //           return false;\n\n  //       // Parse the date parts to integers\n  //       var parts = dateString.split(\"/\");\n  //       var day = parseInt(parts[1], 10);\n  //       var month = parseInt(parts[0], 10);\n  //       var year = parseInt(parts[2], 10);\n\n  //       // Check the ranges of month and year\n  //       if(year < 1000 || year > 3000 || month === 0 || month > 12)\n  //           return false;\n\n  //       var monthLength = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];\n\n  //       // Adjust for leap years\n  //       if(year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0))\n  //           monthLength[1] = 29;\n\n  //       // Check the range of the day\n  //       return day > 0 && day <= monthLength[month - 1];\n  //   };\n    \n \n\n  handleInputChange(event) {\n\n    this.isValidDate(event.target.value) ? this.setState({error: false}) : this.setState({error: true});\n    this.setState({errortxt:\"Changing...\"});\n    isValidDate(event.target.value) ? this.setState({errortxt: \"Yay!\"}) : this.setState({error: \"hmmm\"});\n\n    var key = event.target.name;\n    var value = event.target.value;\n    var obj = {};\n    obj[key] = value;\n    this.setState(obj);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container className=\"p-3 text-left\">\n          <Jumbotron >\n            <div>\n              <h1 className=\"font-weight-light text-primary\">\n                Digitickets Text Input\n              </h1>\n              <h2 className=\"font-weight-light text-primary\">\n                Please enter a valid historical date using the format DD/MM/YYYY\n              </h2>\n            </div>\n            <div>\n              <Form>\n                <Form.Group \n                  controlId=\"formBasicTextInput\"\n                  >\n                  <Form.Label\n                    >Date\n                  </Form.Label>\n                  <Form.Control \n                    type=\"text\" \n                    placeholder=\"DD/MM/YYYY\" \n                    size=\"lg\"\n                    className={\n                    this.state.error\n                      ? \"form-control is-invalid\"\n                      : \"form-control is-valid\"\n                    }\n                    name=\"firstname\"\n                    value={this.state.firstname}\n                    onChange={this.handleInputChange}\n                  />\n                  <Form.Text \n                  className={\n                    this.state.error\n                      ? \"text-danger \"\n                      : \"text-success \"\n                    }\n                  >\n                    {this.state.errortxt}\n                  </Form.Text>\n                </Form.Group>\n              </Form>\n            </div>\n          </Jumbotron>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}