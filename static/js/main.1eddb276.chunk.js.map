{"version":3,"sources":["js/functions.js","App.js","reportWebVitals.js","index.js"],"names":["isValidDate","dateString","test","parts","split","day","parseInt","month","year","monthLength","App","props","state","dateinput","error","errortxt","handleInputChange","bind","event","target","value","this","setState","key","name","obj","className","Helmet","Container","Jumbotron","Form","Group","controlId","Label","Control","type","aria-label","placeholder","size","onChange","Text","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PA2BmBA,MA3BZ,SAAqBC,GAGpB,IAAI,4BAA4BC,KAAKD,GACjC,OAAO,EAGX,IAAIE,EAAQF,EAAWG,MAAM,KACzBC,EAAMC,SAASH,EAAM,GAAI,IACzBI,EAAQD,SAASH,EAAM,GAAI,IAC3BK,EAAOF,SAASH,EAAM,GAAI,IAG9B,GAAGK,EAAO,KAAQA,EAAO,KAAkB,IAAVD,GAAeA,EAAQ,GACpD,OAAO,EAEX,IAAIE,EAAc,CAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAOhE,OAJGD,EAAO,MAAQ,GAAMA,EAAO,MAAQ,GAAKA,EAAO,IAAM,KACrDC,EAAY,GAAK,IAGdJ,EAAM,GAAKA,GAAOI,EAAYF,EAAQ,I,uBCsEtCG,G,wDAjFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,UAAW,GACXC,OAAO,EACPC,SAAU,KAGZ,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBATR,E,8DAYDC,GAEhBlB,EAAYkB,EAAMC,OAAOC,OAASC,KAAKC,SAAS,CAACR,OAAO,IAAUO,KAAKC,SAAS,CAACR,OAAO,IACxFd,EAAYkB,EAAMC,OAAOC,OAASC,KAAKC,SAAS,CAACP,SAAU,YAAcM,KAAKC,SAAS,CAACP,SAAU,iCAElG,IAAIQ,EAAML,EAAMC,OAAOK,KACnBJ,EAAQF,EAAMC,OAAOC,MACrBK,EAAM,GACVA,EAAIF,GAAOH,EACXC,KAAKC,SAASG,K,+BAId,OACE,sBAAKC,UAAU,MAAf,UACE,cAACC,EAAA,EAAD,UACE,uDAEF,cAACC,EAAA,EAAD,CAAWF,UAAU,gBAArB,SACE,eAACG,EAAA,EAAD,WACE,gCACE,oBAAIH,UAAU,iCAAd,oCAGA,qBAAIA,UAAU,iCAAd,kCACuB,2CADvB,0CAIF,8BACE,cAACI,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,MAAN,CACEC,UAAU,qBADZ,UAGE,cAACF,EAAA,EAAKG,MAAN,mBAGA,cAACH,EAAA,EAAKI,QAAN,CACEC,KAAK,OACLC,aAAW,aACXC,YAAY,aACZC,KAAK,KACLZ,UACAL,KAAKT,MAAME,MACP,0BACA,wBAEJU,KAAK,YACLJ,MAAOC,KAAKT,MAAMC,UAClB0B,SAAUlB,KAAKL,oBAEjB,cAACc,EAAA,EAAKU,KAAN,CACAd,UACEL,KAAKT,MAAME,MACP,eACA,gBAJN,SAOGO,KAAKT,MAAMG,8B,GAvEd0B,cCEHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1eddb276.chunk.js","sourcesContent":["export function isValidDate(dateString)\n    {\n        // First check for the pattern\n        if(!/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(dateString))\n            return false;\n\n        // Parse the date parts to integers\n        var parts = dateString.split(\"/\");\n        var day = parseInt(parts[1], 10);\n        var month = parseInt(parts[0], 10);\n        var year = parseInt(parts[2], 10);\n\n        // Check the ranges of month and year\n        if(year < 1000 || year > 3000 || month === 0 || month > 12)\n            return false;\n\n        var monthLength = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];\n\n        // Adjust for leap years\n        if(year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0))\n            monthLength[1] = 29;\n\n        // Check the range of the day\n        return day > 0 && day <= monthLength[month - 1];\n\n        //not future proof\n    }\n    export default isValidDate;\n","import React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport isValidDate from './js/functions.js';\n\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Form from \"react-bootstrap/Form\";\n\nimport './App.css';\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dateinput: \"\",\n      error: false,\n      errortxt: \" \",\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  } \n\n  handleInputChange(event) {\n\n    isValidDate(event.target.value) ? this.setState({error: false}) : this.setState({error: true});\n    isValidDate(event.target.value) ? this.setState({errortxt: \"Correct\"}) : this.setState({errortxt: \"Please check date is correct\"});\n\n    var key = event.target.name;\n    var value = event.target.value;\n    var obj = {};\n    obj[key] = value;\n    this.setState(obj);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Helmet>\n          <title>Date Format Test</title>\n        </Helmet>\n        <Container className=\"p-3 text-left\">\n          <Jumbotron >\n            <div>\n              <h1 className=\"font-weight-light text-primary\">\n                Digitickets Text Input\n              </h1>\n              <h2 className=\"font-weight-light text-primary\">\n                Please enter a valid <i>historical</i> date using the format DD/MM/YYYY\n              </h2>\n            </div>\n            <div>\n              <Form>\n                <Form.Group \n                  controlId=\"formBasicTextInput\"\n                  >\n                  <Form.Label\n                    >Date\n                  </Form.Label>\n                  <Form.Control \n                    type=\"text\"\n                    aria-label=\"date-input\"\n                    placeholder=\"DD/MM/YYYY\" \n                    size=\"lg\"\n                    className={\n                    this.state.error\n                      ? \"form-control is-invalid\"\n                      : \"form-control is-valid\"\n                    }\n                    name=\"dateinput\"\n                    value={this.state.dateinput}\n                    onChange={this.handleInputChange}\n                  />\n                  <Form.Text \n                  className={\n                    this.state.error\n                      ? \"text-danger \"\n                      : \"text-success \"\n                    }\n                  >\n                    {this.state.errortxt}\n                  </Form.Text>\n                </Form.Group>\n              </Form>\n            </div>\n          </Jumbotron>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}