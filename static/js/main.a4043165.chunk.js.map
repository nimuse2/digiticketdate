{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","firstname","error","errortxt","handleInputChange","bind","date","dateString","test","parts","split","day","parseInt","month","year","monthLength","event","console","log","target","value","this","isValidDate","setState","key","name","obj","className","Container","Jumbotron","Form","Group","controlId","Label","Control","type","placeholder","size","onChange","Text","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAqIeA,G,wDA1Hb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,UAAW,GACXC,OAAO,EACPC,SAAU,cAGZ,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBATR,E,qDAaVC,GACP,OAAO,I,kCAKGC,GAGN,IAAI,4BAA4BC,KAAKD,GACjC,OAAO,EAGX,IAAIE,EAAQF,EAAWG,MAAM,KACzBC,EAAMC,SAASH,EAAM,GAAI,IACzBI,EAAQD,SAASH,EAAM,GAAI,IAC3BK,EAAOF,SAASH,EAAM,GAAI,IAG9B,GAAGK,EAAO,KAAQA,EAAO,KAAkB,IAAVD,GAAeA,EAAQ,GACpD,OAAO,EAEX,IAAIE,EAAc,CAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAOhE,OAJGD,EAAO,MAAQ,GAAMA,EAAO,MAAQ,GAAKA,EAAO,IAAM,KACrDC,EAAY,GAAK,IAGdJ,EAAM,GAAKA,GAAOI,EAAYF,EAAQ,K,wCAKjCG,GAChBC,QAAQC,IAAI,SAAUF,EAAMG,OAAOC,OACnCH,QAAQC,IAAI,aAAaG,KAAKC,YAAYN,EAAMG,OAAOC,QAEvDC,KAAKC,YAAYN,EAAMG,OAAOC,OAASC,KAAKE,SAAS,CAACrB,OAAO,IAAUmB,KAAKE,SAAS,CAACrB,OAAO,IAC7FmB,KAAKE,SAAS,CAACpB,SAAS,gBACxBkB,KAAKC,YAAYN,EAAMG,OAAOC,OAASC,KAAKE,SAAS,CAACpB,SAAU,SAAWkB,KAAKE,SAAS,CAACrB,MAAO,SAQjG,IAAIsB,EAAMR,EAAMG,OAAOM,KACnBL,EAAQJ,EAAMG,OAAOC,MACrBM,EAAM,GACVA,EAAIF,GAAOJ,EACXC,KAAKE,SAASG,K,+BAKd,OACE,qBAAKC,UAAU,MAAf,SACE,cAACC,EAAA,EAAD,CAAWD,UAAU,gBAArB,SACE,eAACE,EAAA,EAAD,WACE,gCACE,oBAAIF,UAAU,iCAAd,oCAGA,oBAAIA,UAAU,iCAAd,iFAIF,8BACE,cAACG,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,MAAN,CACEC,UAAU,qBADZ,UAGE,cAACF,EAAA,EAAKG,MAAN,mBAGA,cAACH,EAAA,EAAKI,QAAN,CACEC,KAAK,OACLC,YAAY,aACZC,KAAK,KACLV,UACAN,KAAKrB,MAAME,MACP,0BACA,wBAEJuB,KAAK,YACLL,MAAOC,KAAKrB,MAAMC,UAClBqC,SAAUjB,KAAKjB,oBAEjB,cAAC0B,EAAA,EAAKS,KAAN,CACAZ,UACEN,KAAKrB,MAAME,MACP,eACA,gBAJN,SAOGmB,KAAKrB,MAAMG,6B,GAjHdqC,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a4043165.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Form from \"react-bootstrap/Form\";\n\nimport './App.css';\n\nclass App extends Component {\n  //code\n  // http://michaelsoriano.com/react-bootstrap-form-validation/\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      firstname: \"\",\n      error: true,\n      errortxt: \"Error Text\",\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    // this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  hasError(date) {\n    return true;\n    // return true/false if date valid?\n    // return this.state.errors.indexOf(key) !== -1;\n  }\n  \n  isValidDate(dateString)\n    {\n        // First check for the pattern\n        if(!/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(dateString))\n            return false;\n\n        // Parse the date parts to integers\n        var parts = dateString.split(\"/\");\n        var day = parseInt(parts[1], 10);\n        var month = parseInt(parts[0], 10);\n        var year = parseInt(parts[2], 10);\n\n        // Check the ranges of month and year\n        if(year < 1000 || year > 3000 || month === 0 || month > 12)\n            return false;\n\n        var monthLength = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];\n\n        // Adjust for leap years\n        if(year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0))\n            monthLength[1] = 29;\n\n        // Check the range of the day\n        return day > 0 && day <= monthLength[month - 1];\n    };\n    \n \n\n  handleInputChange(event) {\n    console.log(\"CHANGE\", event.target.value);\n    console.log(\"is valid: \",this.isValidDate(event.target.value) );\n    //\n    this.isValidDate(event.target.value) ? this.setState({error: false}) : this.setState({error: true});\n    this.setState({errortxt:\"Changing...\"});\n    this.isValidDate(event.target.value) ? this.setState({errortxt: \"Yay!\"}) : this.setState({error: \"hmmm\"});\n    // if(event.target.value === \"a\"){\n      // this.setState({error: false});\n      // Validates that the input string is a valid date formatted as \"mm/dd/yyyy\"\n      /*\n      https://stackoverflow.com/questions/6177975/how-to-validate-date-with-format-mm-dd-yyyy-in-javascript\n      */\n      // }\n    var key = event.target.name;\n    var value = event.target.value;\n    var obj = {};\n    obj[key] = value;\n    this.setState(obj);\n  }\n\n  //\n  render() {\n    return (\n      <div className=\"App\">\n        <Container className=\"p-3 text-left\">\n          <Jumbotron >\n            <div>\n              <h1 className=\"font-weight-light text-primary\">\n                Digitickets Text Input\n              </h1>\n              <h2 className=\"font-weight-light text-primary\">\n                Please enter a valid historical date using the format DD/MM/YYYY\n              </h2>\n            </div>\n            <div>\n              <Form>\n                <Form.Group \n                  controlId=\"formBasicTextInput\"\n                  >\n                  <Form.Label\n                    >Date\n                  </Form.Label>\n                  <Form.Control \n                    type=\"text\" \n                    placeholder=\"DD/MM/YYYY\" \n                    size=\"lg\"\n                    className={\n                    this.state.error\n                      ? \"form-control is-invalid\"\n                      : \"form-control is-valid\"\n                    }\n                    name=\"firstname\"\n                    value={this.state.firstname}\n                    onChange={this.handleInputChange}\n                  />\n                  <Form.Text \n                  className={\n                    this.state.error\n                      ? \"text-danger \"\n                      : \"text-success \"\n                    }\n                  >\n                    {this.state.errortxt}\n                  </Form.Text>\n                </Form.Group>\n              </Form>\n            </div>\n          </Jumbotron>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}